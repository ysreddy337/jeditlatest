/*
 * Show_Dual_Diff.bsh - a BeanShell macro script for the
 * jEdit text editor - a front end to the JDiff plugin
 * Copyright (C) author John Gellene
 * jgellene@nyc.rr.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * Version 1.0 - Tue Apr 03 01:19:45 EDT 2001 @263 /Internet Time/
 */

import java.awt.event.*;
import javax.swing.border.*;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;

import org.gjt.sp.jedit.gui.HistoryTextField;
import org.gjt.sp.jedit.*;


void runDualJDiff(String basePath, String newPath)
{
    view.unsplit();
    jEdit.openFile(view, basePath);
    view.splitVertically();
    jEdit.openFile(view, newPath);
    DualDiff.toggleFor(view);
}


void showDualJDiff()
{
    // check for JDiff plugin
    if(jEdit.getPlugin("JDiffPlugin") == null)
    {
        Macros.error(view, "You must have the JDiff plugin "
            + "installed to run this macro.");
        return;
    }

    title = "Show dual diff display";
    dialog = new JDialog(view, title, true);
    content = new JPanel(new GridLayout(5, 1, 0, 0));
    content.setPreferredSize(new Dimension(390, 180));
    content.setBorder(new EmptyBorder(0, 10, 5, 10));
    dialog.setContentPane(content);

    baseLabel = new JLabel("Base file:");
    baseLabel.setForeground(Color.black);
    content.add(baseLabel);

    baseFilePanel = new JPanel(new BorderLayout(5, 5));
    baseFilePanel.setBorder( new EmptyBorder(0, 0, 10, 0));
    baseFileField = new HistoryTextField("user.showDualDiff.basefile");
    baseFileField.setText(buffer.getName());
    baseFilePanel.add(baseFileField, "Center");

    baseChooseButton = new JButton("Choose");
    baseFilePanel.add(baseChooseButton, "East");
    content.add(baseFilePanel);

    newLabel = new JLabel("New file:");
    newLabel.setForeground(Color.black);
    content.add(newLabel);

    newFilePanel = new JPanel(new BorderLayout(5, 5));
    newFilePanel.setBorder( new EmptyBorder(0, 0, 10, 0));
    newFileField = new HistoryTextField("user.showDualDiff.newfile");
    newFilePanel.add(newFileField, "Center");
    newChooseButton = new JButton("Choose");
    newFilePanel.add(newChooseButton, "East");
    content.add(newFilePanel);

    buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 0));
    buttonPanel.setBorder(new EmptyBorder(5, 50, 0, 50));
    ok = new JButton("OK");
    cancel = new JButton("Cancel");
    ok.setPreferredSize(cancel.getPreferredSize());
    dialog.getRootPane().setDefaultButton(ok);
    buttonPanel.add(ok);
    buttonPanel.add(cancel);
    content.add(buttonPanel);

    baseChooseButton.addActionListener(this);
    newChooseButton.addActionListener(this);
    ok.addActionListener(this);
    cancel.addActionListener(this);

    void actionPerformed(e)
    {
        if(e.getSource() == cancel)
        {
            dialog.dispose();
        }
        else if(e.getSource() == ok)
        {
            currentDir = MiscUtilities.getParentOfPath(buffer.getPath());
            basePath = baseFileField.getText();
            newPath = newFileField.getText();
            if(basePath.length() == 0 || newPath.length() == 0)
            {
                Macros.message(view, "Two files must be selected.");
                return;
            }
            err = "";
            errCount = 0;
            if(basePath.indexOf(File.separatorChar) == -1)
                basePath = currentDir + File.separator + basePath;
            if(newPath.indexOf(File.separatorChar) == -1)
                newPath = currentDir + File.separator + newPath;
            if( new File(basePath).exists() == false)
            {
                err += "Base file ";
                ++errCount;
            }
            if( new File(newPath).exists() == false)
            {
                err += ((errCount == 1) ?
                    "and new file do not exist." : "New file ");
                ++errCount;
            }
            if(errCount > 0)
            {
                if(errCount == 1)
                    err += "does not exist.";
                Macros.error(view, err);
                return;
            }
            else
            {
                dialog.dispose();
                runDualJDiff(basePath, newPath);
            }
        }
        else
        {
            field = e.getSource() == baseChooseButton ?
                baseFileField : newFileField;
            fieldText = field.getText();
            if(fieldText.indexOf(File.separatorChar) == -1)
                fieldText = null;
            result = GUIUtilities.showVFSFileDialog(view, fieldText, 0, false);
            if(result != null)
                field.setText(result[0]);
        }
    }

    dialog.addKeyListener(this);

    void keyPressed(e)
    {
        if(KeyEvent.VK_ESCAPE == e.getKeyChar())
        {
            e.consume();
            dialog.dispose();
        }
    }
    void keyReleased(e) {}

    dialog.pack();
    dialog.setLocationRelativeTo(view);
    dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
    dialog.show();
}


showDualJDiff();

// end of Show_Dual_Diff.bsh

