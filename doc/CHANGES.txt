JEDIT 3.0 VERSION HISTORY

* Version 3.0final

+ Enhancements

- The 'filter in file dialogs is current buffer extension' feature in
  the file system browser is now configurable
- Improved plugin manager's install and update dialog boxes

+ Neutral

- Search->Quick HyperSearch no longer records a useless
  'view.quickHyperSearch()' command in macros

+ Bug Fixes

- Saving a new file didn't refresh file system browsers that were
  viewing the directory where the file was saved
- Enabling or disabling the search bar didn't take effect in currently
  opened views if the tool bar was also enabled
- UDP edit server had a number of problems, so I've reverted to the old
  TCP edit server. I'll debug the UDP server in jEdit 3.1
- The installer created an invalid batch file on Windows
- Adding macros to the context menu and tool bar hasn't worked since
  2.7pre2. Bugs like this make me wonder if anyone actually USES
  jEdit...
- Complete word popup would be offset horizontally a little if the
  gutter was visible
- Recorded search and replace actions didn't work

* Version 3.0pre5

+ New Features

- RPM spec file syntax highlighting
- Texinfo syntax highlighting

+ Enhancements

- The default filter in the 'Open File' and 'Save As' dialog boxes is
  now based on the current buffer's extension
- The shell script created by the installer to start jEdit no longer
  runs jEdit in the background
- The modified flag is now set on buffers when the line separator is
  changed in the Buffer Options dialog box
- If, for example, C+ENTER 80 b was entered, all 80 insertions would
  have to be undone one by one. Now, repeated insertions are batched in
  a compound edit
- Plugins are no longer loaded if plugins they depend on could not be
  loaded
- jEdit.bat file is created on Windows again
- The edit server reimplemented to use UDP packets, instead of TCP/IP.
  This makes it virtually immune to DoS attacks, and simplifies the
  code.

+ Neutral

- 'New Version' wizard removed
- 'First Time' wizard replaced with a 'Welcome to jEdit' window
- Main class of installer changed to 'installer.Install'

+ Bug Fixes

- Printing didn't work if syntax highlighting was disabled
- Multiple file selection in the 'Open File' dialog box didn't work
- Several typos in the documentation fixed
- Double-clicking on directories in the file system browser didn't work
- Search strings would not always be added to the history in the search
  bar
- The 'Record Macro' command created buffers with the '.macro'
  extension, not the '.bsh' extension as required
- The commenting commands would insert spaces if comment properties were
  not defined in the current mode. Now, they beep
- The 'Set Marker' command would beep needlessly before displaying the
  prompt dialog
- The 'Run Last Macro' command didn't work
- Scrolling using the arrow keys didn't perform synchronized scrolling
  if it was enabled
- Character classes (eg, [[:alpha:]]) didn't work in regexps because
  the corresponding syntax bit wasn't enabled
- Fixed NullPointerException that would occur if the buffer switcher was
  disabled
- Search dialog is resizable again. Non-resizable dialogs caused
  problems with some Java versions
- Disabling the tip of the day didn't work
- Workaround for bug found in some Java versions where pressing 'Enter'
  in the buffer options dialog box while the focus was inside an
  editable combo box didn't pick up the edit
- File system browser always opened with the default filter
- When selecting to the end of the document, the text area will scroll
  by one line less than necessary
- 'Old style' installer used again, with one file per ZIP entry. The
  'archive' scheme, where everything was stored in an 'install.dat'
  file, was faster and more compact but it caused problems for some
  people
- Fixed minor horizontal scrolling flaw
- Search bar history wouldn't be set up correctly if the search bar
  commands in the 'Search' menu were used
- Aborting HyperSearches didn't work
- Visiting more than 25 pages in one help viewer window would throw
  exceptions (but the help viewer woulds till work)

* Version 3.0pre4

I have decided to renumber this version as 3.0, because the addition of
BeanShell scripting represents a pretty major change to the way jEdit
works.

+ New Features

- DSSSL syntax highlighting
- A tip of the day is now shown when jEdit is started by the EditBuddy
  plugin

+ Enhancements

- jEdit now displays a warning if an attempt is made to search in a file
  set with no files
- Minor 'Go to Previous Paragraph' and 'Go to Next Paragraph' tweak
- Minor installer UI tweaks
- Improved VHDL syntax highlighting (Dante Fabrizio and Nitsan Vardi)
- The buffer switcher can now be navigated from the keyboard
- When a line beginning with a block or box comment string is being
  wrapped, that string is inserted in the next line as well
- The 'Append to Register' command now adds the new text to the
  clipboard history
- EditBuddy's first-time and new-version wizards now look better
- The complete Java look and feel icon collection is now included with
  jEdit, for easier toolbar customization
- Many typos in the documentation have been fixed, the overall style
  is better
- Documentation has been updated for DocBook 4.1 DTD and modular
  stylesheets version 1.59, and the build process has been
  considerably simplified

+ Neutral

- -gui command line switch removed; now, when running in background
  mode, an initial view is created by default. To force jEdit to start
  without an initial view, specify the -nogui switch.
- -reuseview command line switch removed; now, client instances open
  buffers in existing views by default. To force a new view to be
  created by the client, specify the -newview switch.
- Batch search feature renamed to 'HyperSearch' (this is what it used to
  be called in previous jEdit versions)
- 'Save session on exit' setting moved to 'Loading & Saving' option
  pane, and renamed to 'Restore previously open files on startup'
- 'Go to Next/Previous Split' commands renamed to 'Go to Next/Previous
  Text Area'

+ Bug Fixes

- If the file system browser was set to display the last visted
  directory by default, it would obtain this directory from the wrong
  history list
- The buttons in the first-time and new-version wizards didn't work
- Word wrap didn't behave correctly if there was more than one word
  beyond the wrap column position
- Entering a blank file name filter in the search and replace dialog box
  now searches in all files. Previously, it would generate an empty file
  set
- Soft tabs did not have the correct width if inserted in the middle of
  a line
- If the last action in a macro was an insertion, the trailing `");'
  would not be inserted, and hence the macro would not run
- Entering filenames in the filename field of the 'Open' dialog box
  didn't work properly
- A NullPointerException would be thrown when opening an unreadable file
- The Home and End keys would not record themselves properly, and the
  resulting macro would not run
- The favorites list can no longer be added to itself
- When a buffer was being closed, the caret location would not always be
  saved to the recent list
- Patch to make Java version checking work properly with Kaffe
  (Mike Dillon)
- Minor type select code bugfix

* Version 2.7pre3

+ New Features

- The list of recent files, along with their caret positions, is now
  stored in <user.home>/.jedit/recent.
  - When a file is opened, the caret is moved to the saved position
  - Sessions no longer record caret positions; just filenames
  - The session file format has changed. Old sessions will continue to
    work in jEdit 2.7pre3, however older jEdit versions will have
    problems loading sessions created by this version.
  - The number of files to remember is determined by the 'Maximum
    history list length' setting in Utilities->Global Options->General
  - If you would prefer recent files to open with the caret at the
    beginning, the caret saving feature can be disabled in
    Utilities->Global Options->General.
- x86 assembly syntax highlighting (Kristian Ovaska)
- You can now once again select files in the file system browser by
  typing the first few characters of their name (this feature was
  removed in 2.7pre1) (Denis Lambot)

+ Enhancements

- Search and replace changes:
  - Search and replace and HyperSearch dialog boxes merged into one;
    HyperSearch can be enabled by selecting the 'Batch' check box
  - Multiple file search settings are accessable directly from search
    and replace dialog box
  - Batch search results are displayed in a dockable window
  - Batch search can be performed from the search bar, too
  - Batch searches can be aborted in Utilities->I/O Progress Monitor
  - Multiple file search can no longer be done from the search bar
  - Normal searches can no longer be done from the search bar; only
    incremental (and batch) search is supported now
  - The search fileset is now stored in the properties
- Much faster bracket highlighting
- Minor scheme mode updates (Mike Dillon)
- The shell script for starting jEdit created by the installer on Unix
  now starts jEdit using the virtual machine that was used to run the
  installer, and not the system default VM
- Documentation updates:
  - Keyboard shortcut reference

+ Neutral

- find-selection is now bound to C+h instead of C+e C+f

+ Bug Fixes

- HyperSearch.java didn't compile
- CS+LEFT selected the previous paragraph, not the previous word as
  intended
- Disabling the search bar caused problems
- Word wrap would wrap the line of the text was on the wrap column; it
  should've only wrapped it if was beyond the wrap column
- Minor scrolling bugs fixed
- Searching in a directory with no files would throw a
  NullPointerException
- Backspace key didn't work in history text fields on some Java versions
- Fixed race between autosave I/O request and save cleanup that could
  result in autosave files being left after a successful save
  (Denis Lambot)
- Assigning shortcuts to plugins that used the new-style action system
  wouldn't work
- Minor performance improvement in EditBus class (Denis Lambot)

* Version 2.7pre2

+ New Features

- BeanShell scripting is now in the core.
  - BeanShell 1.01 with a few minor modifications is bundled. I will switch
    to BeanShell 1.1 as soon as the beta version is released
  - Replaces old macro system and BeanShell plugin (remove it)
  - New commands in 'Utilities' menu for evaluating an arbitriary command, the
    selection, or a script
  - The hundreds of classes in the org.gjt.sp.jedit.actions package are now
    gone; instead, actions are now written in BeanShell. The performance hit is
    minimal (espsecially with a good JVM) because most actions consist of
    nothing more than one or two method calls
  - There is a new EditAction API. Because the new API offers no compelling
    advantages at this point in time, I do not suggest that plugins are
    updated for the new API until after jEdit 2.7final is out. (Plugins using
    the old API will still work)
  - Old macros will need to be rewritten. A conversion tool may appear in a
    future release.

+ Enhancements

- Electric scrolling is now only performed when moving the caret using
  keyboard commands
- The buffer switching popup can now be disabled. You might want to do this if
  you prefer using another method to switch buffers, for example the
  BufferList or BufferSelector plugins
- The caret status has been moved to the bottom-left corner of the text area.
  So the jEdit 2.7pre2 GUI looks very similar to the old jEdit 2.4 GUI now.
  What goes around, comes around ;-)
- Documentation updates

+ Neutral

- I have decided that the 'command line' really sucks. So the old jEdit 2.5
  search bar is back. Now that BeanShell is integrated, the command line isn't
  as useful anyway.
- Key binding changes:
  - insert-literal is now bound to C+e v
  - save-all is now bound to C+e C+s
  - paste-previous is now bound to C+e C+v
  - the docking collapse/expand commands are now bound to C+e 1,2,3,4
  - next/prev-buffer is now bound to C+PAGE_UP and C+PAGE_DOWN
  - next/prev-split is now bound to A+PAGE_UP and A+PAGE_DOWN
  - recent-buffer is now bound to C+`
  - close-all is now bound to C+e C+w
  - reload, reload-all and new-view no longer have keyboard shortcuts
  - note how none of the function keys are now bound (except for F1).

+ Bug Fixes

- The 'Open File' dialog box erronously displayed an 'are you sure you want to
  overwrite...' warning
- The 'Edit System Macros' and 'Edit User Macros' commands threw exceptions
  if the filesystem browser wasn't open
- Mode-specific tab size and wrap column settings were not respected
- Unknown files could be opened with a random edit mode if some edit modes had
  settings customized in the Global Options dialog box
- The 'Format Paragraph' command messed up if the maximum line length was set
  to 0, and it didn't use compound edits so it took two invocations of 'Undo'
  to undo
- Reloading a file with unsaved changes could under some circumstances create
  an unneeded autosave file

+ API Changes

- Plugins which depend on the macro system, such as XInsert, will need to be
  updated to support BeanShell
- Action commands can no longer be passed to EditActions. So plugins that rely
  on this (for example, Templates) will need to be changed to instead use
  JMenuItems with custom action listeners
- Macro recording API has changed; if you use the Console plugin, upgrade to
  Console 2.3.1

* Version 2.7pre1

+ New Features

- Word wrap:
  - The maximum line length is set by the 'maxLineLen' buffer property.
    The global default is 80; it can also be changed on a mode- and
    buffer-specific basis.
  - Setting it to zero disables word wrap.
  - If, when typing, the line length exceeds the maximum, a line break
    is inserted in the appropriate location.
  - A 'wrap guide' is drawn in the text area at the wrap column. This
    is similar to the LineGuides plugin.
- Ollie Rutherfurd's scrolling actions in View->Scrolling menu:
  - Scroll Up/Down Line: C+' and C+/
  - Scroll Up/Down Page: A+' and A+/
  - Center Caret: C+e C+i
- Checkbox to the right of the 'Filter:' field in the VFS browser can be
  used to temporarily display all files in the current directory
- 'File name' text field is now displayed in the 'Open File' dialog box
  as well as the 'Save As' dialog box
- A buffer list combo box replaces the buffer tabs component and
  View->Current Buffer menu
- 'File->Save a Copy As' command: same as 'Save As', except that the
  buffer's name isn't changed to the new name
- Commands in View->Docking Areas menu collapse/expand the window
  docking areas (bound to F6, F7, F8, F9 for top, left, right and bottom
  collapse/expand, respectively)
- jEdit now differentiates between the 'indent width' and 'tab width'.
  - the 'tab width' is only used when displaying tabs (\t), so should
    probably be set to 8 in most circumstances
  - the 'indent width' is used when shifting the indent, either using
    the 'shift-left' or 'shift-right' commands, or auto indent feature
- 'Synchronized Scrolling', which can be enabled in View->Scrolling,
  forces all text areas in a view to have the same scroll bar positions
- 'Insert File' command in File menu
- 'Replace and Find Next' command added (replaces 'Replace and Find Next'
  macro)
- If the <jedit install dir>/site-props directory exists, all property
  files are loaded from it on jEdit startup before user-specific properties.
  This can be used to enforce site-wide key bindings, color schemes, etc
  on multi-user systems (Mike Dillon)
- Format and Remove Trailing Whitespace actions from TextTools plugin
  integrated into the core
  - Format: bound to C+e f, reflows current paragraph or selection
  - Remove Trailing Whitespace: bound to C+e r, removes whitespace at
    the end of lines
- Multiple line search and replace now supported
- C# syntax highlighting (Ollie Rutherfurd)

+ Enhancements

- New default color scheme is easier on the eyes
- Better icons to indicate buffer new, dirty, read-only status
- If a selection is active, the left and right arrow keys now move to
  caret to the beginning and end of the selection, respectively
- Block cursor feature improved
- Search & replace and HyperSearch dialog boxes are 'pooled' and reused;
  as a result, after one of these dialogs has been opened once,
  subsequent displays should be faster
- More extensive Alt-key mnemonics in searching dialog boxes
- File system browsers are now reloaded if necessary after a 'save as'
- Caret location info moved to top right of text area
- The horizontal scroll bar, instead of having a fixed maximum value,
  is how adjusted according to the width of the longest visible line
- The 'append-to-register' command adds a newline to the text already in
  the register before appending
- Slightly faster HyperSearch over a directory of files
- HyperSearch now displays results in a tree format
- Minor change to dockable window behavior. If a dockable is open but
  it's container is collapsed, invoking the dockable's action will
  expand the container
- Deleting a file that is currently open in jEdit is now handled better
- When scrolling long distanes, the caret is now centered on the screen
- Buffer properties are reset when the edit mode is changed. For example,
  if your default tab size is set to 8 but Java tab size set to 4 and
  you save a new file with the ".java" extension, the tab size will
  automatically change to 4
- New options dialog layout
- Documentation updates

+ Neutral

- Key binding changes:
  - 'Gutter Expanded' now bound to C+e C+t instead of C+'
  - 'Expand Abbreviation' now bound to C+; instead of C+/
  - 'View Registers' now bound to S+F5 instead of F6
  - 'Delete Paragraph' now bound to C+e d instead of C+e C+d
- List view removed from browser, only tree view supported
- FTP support moved to a separate plugin, available from plugin central

+ Bug Fixes

- Dragging a dockable area to its minimum size is now handled the same
  as collapsing it
- 'Clear Register' action didn't work
- Mode cache wasn't created properly if empty property names were present
- The text area would repaint too much when the caret was being moved,
  which caused a slight slowdown
- 'Open Selection' macro didn't work
- Disabling the 'check file modification status' setting would have no effect
- Some Java implementations return the clipboard contents using the native line
  separator. This caused problems when the contents were inserted into the
  buffer

+ API Changes

- JEditTextArea.setOrigin() deprecated. This method should not be called
  anyway.

-- Slava Pestov
<sp@gjt.org>
