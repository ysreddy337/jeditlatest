<!-- jEdit buffer-local properties: -->
<!-- :indentSize=1:noTabs=yes: -->

<chapter id=source-edit><title>Editing Source Code</>
 <sect1 id=abbrevs><title>Abbreviations</>
  <indexterm><primary>Edit menu</></indexterm>
  <indexterm><primary>Expand Abbreviation command</></indexterm>
  <indexterm><primary>Global Options command</></indexterm>
  <indexterm><primary>Utilities menu</></indexterm>
  <indexterm><primary>modes</></indexterm>
  <indexterm><primary>buffers</></indexterm>
  <para>
   Using abbreviations reduces the time spent typing long but commonly used
   strings. For example, in Java mode, the abbreviation <quote>sout</> is
   defined to expand to <quote>System.out.println()</>, so to insert
   <quote>System.out.println()</> in a Java buffer, you only need to type
   <quote>sout</> followed by
   <keycombo><keycap>Control</><keycap>;</></keycombo>.
   Each abbreviation can either be global, in which case it will expand in all
   edit modes, or mode-specific. Abbreviations can be edited
   in the <guibutton>Abbrevs</> pane of the
   <guimenu>Utilities</>&gt;<guimenuitem>Global Options</> dialog box.
  </para>
  <para>
   <guimenu>Edit</>&gt;<guimenuitem>Expand Abbreviation</> (keyboard
   shortcut: <keycombo><keycap>Control</><keycap>;</></keycombo>)
   attempts to expand the word before the caret. If no expansion could
   be found, it will offer to define one. 
  </para>
  <!-- <figure><title>The Add Abbreviation dialog box</>
   <graphic scale=50 fileref=dialog-add-abbrev></>
  </figure> -->
  <para>
   Automatic abbreviation expansion can be enabled in the
   <guibutton>Abbrevs</> pane of the
   <guimenu>Utilities</>&gt;<guimenuitem>Global Options</> dialog box.
   If enabled, pressing the space bar will automatically expand
   the word before the caret, assuming it is a valid abbreviation.
  </para>
  <para>
   If automatic expansion
   is enabled, a space can be inserted without expanding the word before
   the caret by pressing <keycombo><keycap>Control</><keycap>E</></keycombo>
   <keycap>V</> <keycap>Space</>.
  </para>
 </sect1>
 <sect1 id=bracket-matching><title>Bracket Matching</>
  <indexterm><primary>bracket matching</></indexterm>
  <indexterm><primary>Locate Bracket command</></indexterm>
  <indexterm><primary>Go to Previous Bracket command</></indexterm>
  <indexterm><primary>Go to Next Bracket command</></indexterm>
  <indexterm><primary>Edit menu</></indexterm>
  <indexterm><primary>selecting</><secondary>code blocks</></indexterm>
  <indexterm><primary>Select Code Block command</></indexterm>
  <indexterm><primary>Brackets menu</></indexterm>
  <indexterm><primary>Global Options command</></indexterm>
  <indexterm><primary>Utilities menu</></indexterm>
  <para>
   Misplaced and unmatched brackets are one of the most common syntax
   errors encountered when writing code. jEdit has several features
   to make brackets easier to deal with.
  </para>
  <para>
   If the character immediately before the caret position is a bracket, the
   matching one will be highlighted (assuming it is visible on the
   screen). Bracket highlighting can be disabled in the
   <guibutton>Text Area</> pane of the
   <guimenu>Utilities</>&gt;<guimenuitem>Global Options</> dialog box.
  </para>
  <para>
   <guimenu>Edit</>&gt;<guisubmenu>Brackets</>&gt;<guimenuitem>Go to Matching
   Bracket</> (shortcut: <keycombo><keycap>Control</><keycap>]</></keycombo>)
   goes to the bracket matching the one before the caret.
  </para>
  <para>
   Double-clicking on a bracket in the text area will select all text
   between the bracket and the one matching it.
  </para>
  <para>
   <guimenu>Edit</>&gt;<guisubmenu>Brackets</>&gt;<guimenuitem>Select Code Block</>
   (shortcut: <keycombo><keycap>Control</><keycap>[</></keycombo>)
   selects all text between the two brackets nearest to the caret.
  </para>
  <para>
   <guimenu>Edit</>&gt;<guisubmenu>Brackets</>&gt;<guimenuitem>Go to Previous
   Bracket</> (shortcut: <keycombo><keycap>Control</><keycap>E</></>
   <keycap>[</>)
   moves the caret to the previous opening bracket.
  </para>
  <para>
   <guimenu>Edit</>&gt;<guisubmenu>Brackets</>&gt;<guimenuitem>Go to Next
   Bracket</> (shortcut: <keycombo><keycap>Control</><keycap>E</></>
   <keycap>]</>)
   moves the caret to the next closing bracket.
  </para>
  <note>
   <para>
    jEdit's bracket matching algorithm only checks syntax tokens with the same
    type as the original bracket for matches. So brackets inside string
    literals and comments will not cause problems, as they will
    be skipped.
   </para>
  </note>
  <!-- <figure><title>Bracket matching in action</>
   <graphic scale=50 fileref=window-editor-bracket></>
  </figure> -->
 </sect1>
 <sect1 id=indent><title>Tabbing and Indentation</>
  <indexterm><primary>buffer-local properties</>
  <secondary>tabSize</></indexterm>
  <indexterm><primary>buffer-local properties</>
  <secondary>indentSize</></indexterm>
  <indexterm><primary>tab width</></indexterm>
  <indexterm><primary>indent width</></indexterm>
  <indexterm><primary>Global Options command</></indexterm>
  <indexterm><primary>Utilities menu</></indexterm>
  <para>
   jEdit makes a distinction between the <firstterm>tab width</>, which is
   is used when displaying tab characters, and the <firstterm>indent width</>,
   which is used when a level of indent is to be added or removed, for example
   by mode-specific smart indent routines. Both can be changed in one of
   several ways:
  </para>
  <itemizedlist>
   <listitem><para>On a global or mode-specific basis in
   <guibutton>Editing</> and <guibutton>Mode-Specific</> panes of the
   the <guimenu>Utilities</>&gt;<guimenuitem>Global Options</> dialog box.
   </para></listitem>
   <listitem><para>In the current buffer
   for the duration of the editing session in the
   <guimenu>Utilities</>&gt;<guimenuitem>Buffer Options</> dialog box.
   </para></listitem>
   <listitem><para>In the current buffer
   for future editing sessions by placing the
   following in one of the first 10 lines of the buffer, where
   <replaceable>n</> is the desired tab width, and
   <replaceable>m</> is the desired indent width:
   </para>
   <screen>:tabSize=<replaceable>n</>:indentSize=<replaceable>m</>:</screen>
   </listitem>
  </itemizedlist>
  <para>
   <indexterm><primary>Shift Indent Left command</></indexterm>
   <indexterm><primary>Shift Indent Right command</></indexterm>
   <indexterm><primary>Selection menu</></indexterm>
   <indexterm><primary>Edit menu</></indexterm>
   <guimenu>Edit</>&gt;<guisubmenu>Lines</>&gt;<guisubmenu>Shift Indent Left</>
   (shortcut: <keycombo><keycap>Alt</><keycap>Left</></keycombo>)
   adds one level of indent to each selected line, or the current line
   if there is no selection.
  </para>
  <para>
   <guimenu>Edit</>&gt;<guisubmenu>Lines</>&gt;<guisubmenu>Shift Indent Right</>
   (shortcut: <keycombo><keycap>Alt</><keycap>Right</></keycombo>)
   removes one level of indent from each selected line, or the current line
   if there is no selection.
  </para>
  <sect2 id=soft-tabs><title>Soft Tabs</>
   <para>
    <indexterm><primary>soft tabs</></indexterm>
    <indexterm><primary>buffer-local properties</>
    <secondary>noTabs</></indexterm>
   <indexterm><primary>Global Options command</></indexterm>
   <indexterm><primary>Utilities menu</></indexterm>
    Because files indented using tab characters may look less than ideal when
    viewed on a system with a different default tab size, it is sometimes
    desirable to use multiple spaces, known as <firstterm>soft tabs</>,
    instead of real tab characters, to indent code.
   </para>
   <para>
    Soft tabs can be enabled or disabled in one of several ways:
   </para>
   <itemizedlist>
    <listitem><para>On a global or edit mode-specific basis in the
    <guibutton>Editing</> and <guibutton>Mode-Specific</> panes of the
    <guimenu>Utilities</>&gt;<guimenuitem>Global Options</>
    dialog box.</para></listitem>
    <listitem><para>In the current buffer for
    the duration of the editing session in the
    <guimenu>Utilities</>&gt;<guimenuitem>Buffer Options</> dialog box.
    </para></listitem>
    <listitem><para>In the current buffer for
    future editing sessions by placing the following in one of the first
    10 lines of the buffer, where <replaceable>flag</> is either
    <quote>true</> or <quote>false</>:
    </para>
    <screen>:noTabs=<replaceable>flag</>:</screen>
    </listitem>
   </itemizedlist>
   <para>
    Changing the soft tabs setting has no effect on existing tab characters;
    it only affects subsequently-inserted tabs.
   </para>
   <indexterm><primary>selection</></indexterm>
   <indexterm><primary>Spaces to Tabs command</></indexterm>
   <indexterm><primary>Tabs to Spaces command</></indexterm>
   <indexterm><primary>Selection menu</></indexterm>
   <indexterm><primary>Edit menu</></indexterm>
   <para>
    <guimenu>Edit</>&gt;<guisubmenu>Selection</>&gt;<guimenuitem>Spaces to Tabs</>
    converts soft tabs to hard tabs in the current selection.
   </para>
   <para>
    <guimenu>Edit</>&gt;<guisubmenu>Selection</>&gt;<guimenuitem>Tabs to Spaces</>
    converts hard tabs to soft tabs in the current selection.
   </para>
  </sect2>
  <sect2 id=autoindent><title>Automatic Indent</>
   <indexterm><primary>buffer-local properties</>
   <secondary>indentOnEnter</></indexterm>
   <indexterm><primary>buffer-local properties</>
   <secondary>indentOnTab</></indexterm>
   <indexterm><primary>Indent Selected Lines command</></indexterm>
   <indexterm><primary>Lines menu</></indexterm>
   <indexterm><primary>Edit menu</></indexterm>
   <indexterm><primary>Global Options command</></indexterm>
   <indexterm><primary>Utilities menu</></indexterm>
   <para>
    The auto indent feature inserts the appropriate number of tabs or
    spaces at the beginning of a line.
   </para>
   <para>
    If indent on enter is enabled, pressing <keycap>Enter</>
    will create a new line with the appropriate amount of
    indent automatically.  If indent on tab is enabled, pressing
    <keycap>Tab</> on
    an unindented line will insert the appropriate amount of
    indentation. Pressing it again will insert a tab character.
   </para>
   <para>
    By default, indent on enter is enabled and indent on tab is
    disabled. This can be changed in one of several ways:
   </para>
   <itemizedlist>
    <listitem><para>On a global or mode-specific
    basis in the <guibutton>Editing</> and <guibutton>Mode-Specific</> panes
    of the <guimenu>Utilities</>&gt;<guimenuitem>Global Options</>
    dialog box.</para></listitem>
    <listitem><para>In the current buffer for the duration of the editing
    session in the
    <guimenu>Utilities</>&gt;<guimenuitem>Buffer Options</> dialog box.
    </para></listitem>
    <listitem><para>In the current buffer for future editing sessions
    by placing the following in the first 10 lines of a buffer,
    where <replaceable>flag</> is either <quote>true</> or <quote>false</>:
    </para>
    <screen>:indentOnEnter=<replaceable>flag</>:indentOnTab=<replaceable>flag</>:</screen>
    </listitem>
   </itemizedlist>
   <para>
    Auto indent behavior is mode-specific. In most edit modes,
    the indent of the previous line is simply copied over.
    However, in C-like languages (C, C++, Java, JavaScript), curly
    brackets and language statements are taken into account and indent
    is added and removed as necessary.
   </para>
   <para>
    <guimenu>Edit</>&gt;<guisubmenu>Lines</>&gt;<guisubmenu>Indent
    Selected Lines</>
    (shortcut: <keycombo><keycap>Control</><keycap>I</></keycombo>)
    indents all selected lines, or the current line if there is no
    selection.
   </para>
   <para>
    To insert a literal tab or newline without performing
    indentation, prefix the tab or newline with
    <keycombo><keycap>Control</><keycap>E</></keycombo>
    <keycap>V</>. For example,
    to create a new line without any indentation, type
    <keycombo><keycap>Control</><keycap>E</></keycombo>
    <keycap>V</> <keycap>Enter</>.
   </para>
  </sect2>
 </sect1>
 <sect1 id=commenting><title>Commenting Out Code</>
  <indexterm><primary>selection</></indexterm>
  <para>
   Most programming and markup languages support <quote>comments</>, or
   regions of  code which are ignored by the compiler/interpreter. jEdit
   has commands which make inserting comments more convenient.
  </para>
  <para>
   <indexterm><primary>Wing Comment command</></indexterm>
   <indexterm><primary>Selection menu</></indexterm>
   <indexterm><primary>Edit menu</></indexterm>
   <indexterm><primary>buffer-local properties</>
   <secondary>commentStart</></indexterm>
   <indexterm><primary>buffer-local properties</>
   <secondary>commentEnd</></indexterm>
   <indexterm><primary>Global Options command</></indexterm>
   <indexterm><primary>Utilities menu</></indexterm>
   <guimenu>Edit</>&gt;<guisubmenu>Selection</>&gt;<guimenuitem>Wing Comment</>
   (shortcut: <keycombo><keycap>Control</><keycap>E</></keycombo>
   <keycombo><keycap>Control</><keycap>C</></keycombo>) encloses the
   selection with comment start and end strings. An example of Java
   wing commented code looks like so:
  </para>
  <screen>/* if(obj instanceof DBConnection)
    ((DBConnection)obj).close(); */</screen>
  <para>
   Comment start and end strings can be changed on a mode-specific
   basis in the
   <guibutton>Mode-Specific</> pane of the
   <guimenu>Utilities</>&gt;<guimenuitem>Global Options</>
   dialog box, or on a buffer-specific basis using buffer-local
   properties. For example, placing the following in one of the first 10 lines
   of a buffer will change the wing comment strings to <quote>(*</> and
   <quote>*)</>:
  </para>
   <screen>:commentStart=(*:commentEnd=*):</screen>
  <para>
   <indexterm><primary>Box Comment command</></indexterm>
   <indexterm><primary>buffer-local properties</>
   <secondary>boxComment</></indexterm>
   <guimenu>Edit</>&gt;<guisubmenu>Selection</>&gt;<guimenuitem>Box Comment</>
   (shortcut: <keycombo><keycap>Control</><keycap>E</></keycombo>
   <keycombo><keycap>Control</><keycap>B</></keycombo>) encloses the
   selection with comment start and end strings, and places the box
   comment string at the start of each line. An example of Java
   box commented code looks like so:
  </para>
  <screen>/* if(obj instanceof DBConnection)
*     ((DBConnection)obj).close(); */</screen>
  <para>
   The strings used for box commenting can be changed on a mode-specific
   basis in the <guibutton>Mode-Specific</> pane of the
   <guimenu>Utilities</>&gt;<guimenuitem>Global Options</>
   dialog box, or on a buffer-specific basis using buffer-local
   properties. For example, placing the following in one of the first 10 lines
   of a buffer will change the box comment strings to <quote>(*</> and
   <quote>*</>), with <quote>**</> placed at the start of each line:
  </para>
  <screen>:commentStart=(*:commentEnd=*):boxComment=**:</screen>
  <para>
   <indexterm><primary>Block Comment command</></indexterm>
   <indexterm><primary>buffer-local properties</>
   <secondary>blockComment</></indexterm>
   <guimenu>Edit</>&gt;<guisubmenu>Selection</>&gt;<guimenuitem>Block Comment</>
   (shortcut: <keycombo><keycap>Control</><keycap>E</></keycombo>
   <keycombo><keycap>Control</><keycap>K</></keycombo>) inserts the
   block comment string at the start of each selected line.
   An example of Java block commented code looks like so:
  </para>
  <screen>// if(obj instanceof DBConnection)
//     ((DBConnection)obj).close();</screen>
  <para>
   The block comment string can be changed on a mode-specific
   basis in the <guibutton>Mode-Specific</> pane of the
   <guimenu>Utilities</>&gt;<guimenuitem>Global Options</>
   dialog box, or on a buffer-specific basis using buffer-local
   properties. For example, placing the following in one of the first 10 lines
   of a buffer will change the block comment string to <quote>#</>:
  </para>
  <screen>:blockComment=#:</screen>
 </sect1>
</chapter>
