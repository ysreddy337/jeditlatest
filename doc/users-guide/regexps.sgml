<!-- jEdit buffer-local properties: -->
<!-- :tabSize=1:indentSize=1:noTabs=yes: -->

<appendix id=regexps><title>Regular Expressions</>
 <indexterm><primary>regular expressions</></indexterm>
 <indexterm><primary>Search and Replace dialog box</></indexterm>
 <indexterm><primary>HyperSearch dialog box</></indexterm>
 <para>
  jEdit uses regular expressions to implement inexact search and replace.
  A regular expression consists of a string where some
  characters are given special meaning with regard to pattern matching.
 </para>
 <para>
  Within a regular expression, the following characters have special meaning:
 </para>
 <bridgehead renderas=sect3>Positional Operators</>
 <itemizedlist>
  <listitem><para><literal>^</> matches at the beginning of a line</></listitem>
  <listitem><para><literal>$</> matches at the end of a line</></listitem>
 </itemizedlist>
 <bridgehead renderas=sect3>One-Character Operators</>
 <itemizedlist>
  <listitem><para><literal>.</> matches any single character</></listitem>
  <listitem><para><literal>\d</> matches any decimal digit</></listitem>
  <listitem><para><literal>\D</> matches any non-digit</></listitem>
  <listitem><para><literal>\n</> matches the newline character</></listitem>
  <listitem><para><literal>\s</> matches any whitespace character</></listitem>
  <listitem><para><literal>\S</> matches any non-whitespace character</></listitem>
  <listitem><para><literal>\t</> matches a horizontal tab character</></listitem>
  <listitem><para><literal>\w</> matches any word (alphanumeric) character</></listitem>
  <listitem><para><literal>\W</> matches any non-word (alphanumeric)
  character</></listitem>
  <listitem><para><literal>\\</literal> matches the backslash
  (<quote>\</>) character</></listitem>
 </itemizedlist>
 <bridgehead renderas=sect3>Character Class Operator</>
 <itemizedlist>
  <listitem><para><literal>[<replaceable>abc</>]</literal> matches any character in
  the set <replaceable>a</>, <replaceable>b</> or
  <replaceable>c</></para></listitem>
  <listitem><para><literal>[^<replaceable>abc</>]</literal> matches any character not
  in the set <replaceable>a</>, <replaceable>b</> or
  <replaceable>c</></para></listitem>
  <listitem><para><literal>[<replaceable>a-z</>]</literal> matches any character in the
  range <replaceable>a</> to <replaceable>z</>, inclusive.
  A leading or trailing dash will be interpreted literally</para></listitem>
 </itemizedlist>
 <para>
  Within a character class expression, the following sequences have special meaning:
  <itemizedlist>
   <listitem><para><literal>[:alnum:]</> Any alphanumeric
   character</para></listitem>
   <listitem><para><literal>[:alpha:]</> Any alphabetical character</para></listitem>
   <listitem><para><literal>[:blank:]</> A space or horizontal tab</para></listitem>
   <listitem><para><literal>[:cntrl:]</> A control character</para></listitem>
   <listitem><para><literal>[:digit:]</> A decimal digit</para></listitem>
   <listitem><para><literal>[:graph:]</> A non-space, non-control character</para></listitem>
   <listitem><para><literal>[:lower:]</> A lowercase letter</para></listitem>
   <listitem><para><literal>[:print:]</> Same as <literal>[:graph:]</>, but also space and tab</para></listitem>
   <listitem><para><literal>[:punct:]</> A punctuation character</para></listitem>
   <listitem><para><literal>[:space:]</> Any whitespace character, including newlines</para></listitem>
   <listitem><para><literal>[:upper:]</> An uppercase letter</para></listitem>
   <listitem><para><literal>[:xdigit:]</> A valid hexadecimal digit</para></listitem>
  </itemizedlist>
 </para>
 <bridgehead renderas=sect3>Subexpressions and Backreferences</>
 <itemizedlist>
  <listitem><para><literal>(<replaceable>abc</>)</> matches whatever the expression
  <replaceable>abc</> would match, and saves it as a subexpression.
  Also used for grouping</para></listitem>
  <listitem><para><literal>(?:<replaceable>...</>)</> pure grouping operator, does not
  save contents</para></listitem>
  <listitem><para><literal>(?#<replaceable>...</>)</> embedded comment, ignored by
  engine</para></listitem>
  <listitem><para><literal>\<replaceable>n</></> where 0 &lt; <replaceable>n</> &lt; 10,
  matches the same thing the <replaceable>n</>th
  subexpression matched. Can only be used in the search string</para></listitem>
  <listitem><para><literal>$<replaceable>n</></> where 0 &lt; <replaceable>n</> &lt; 10,
  substituted with the text matched by the <replaceable>n</>th
  subexpression. Can only be used in the replacement string</para></listitem>
 </itemizedlist>
 <bridgehead renderas=sect3>Branching (Alternation) Operator</>
 <itemizedlist>
  <listitem><para><literal><replaceable>a</>|<replaceable>b</></literal> matches
  whatever the expression <replaceable>a</> would match, or whatever
  the expression <replaceable>b</> would match.</para></listitem>
 </itemizedlist>
 <bridgehead renderas=sect3>Repeating Operators</>
 <para>
  These symbols operate on the previous atomic expression.
 </para>
 <itemizedlist>
  <listitem><para><literal>?</> matches the preceding expression or the
  null string</para></listitem>
  <listitem><para><literal>*</> matches the null string or any number of repetitions
  of the preceding expression</para></listitem>
  <listitem><para><literal>+</> matches one or more repetitions of the preceding
  expression</para></listitem>
  <listitem><para><literal>{<replaceable>m</>}</> matches exactly <replaceable>m</>
  repetitions of the one-character expression</para></listitem>
  <listitem><para><literal>{<replaceable>m</>,<replaceable>n</>}</> matches between
  <replaceable>m</> and <replaceable>n</> repetitions of the preceding
  expression, inclusive</para></listitem>
  <listitem><para><literal>{<replaceable>m</>,}</> matches <replaceable>m</> or more
  repetitions of the preceding expression</para></listitem>
 </itemizedlist>
 <bridgehead renderas=sect3>Stingy (Minimal) Matching</>
 <para>
  If a repeating operator (above) is immediately followed by a
  <literal>?</>, the repeating operator will stop at the smallest
  number of repetitions that can complete the rest of the match.
 </para>
</appendix>
