<!-- jEdit 3.1 Macro Guide, (C) 2001 John Gellene                -->
<!-- Revised Mon Apr 16 15:25:13 EDT 2001 @850 /Internet Time/   -->
<!--                                                             -->
<!-- jEdit buffer-local properties:                              -->
<!-- :indentSize=1:noTabs=yes:maxLineLen=72:tabSize=2:           -->
<!--                                                             -->
<!-- This file contains the jEdit API Quick Reference            -->


<appendix id=api-guide><title>jEdit API Quick Reference</>

<para>
    The source code for jEdit covers over 200 classes (not counting classes
    from other open source packages like BeanShell and the GNU regular
    expression package).  Embedding a BeanShell interpreter within jEdit
    makes most of those classes available to the user to help customize and
    extend the program.  For the vast majority of circumstances, however,
    only a handful of classes will be needed for writing a macro script.
    The following is a quick guide to some of the principal jEdit classes
    that are useful in writing macros.
</para>

<sect1 id=class-jEdit><title>Class jEdit</>

<para>
    This is the main class of the application. The methods likely
    to be invoked in macros are all <type>static</> methods, so
    they are called with the following syntax:
</para>
<programlisting>    jEdit.<emphasis>name_of_method</>(<emphasis>parameters</>)
</programlisting>

<para>
    Here are a few key methods:
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static Buffer <function>openFile</></>
  <paramdef>View <parameter>view</></>
  <paramdef>String <parameter>path</></>
 </funcprototype>
</funcsynopsis>
<para>
    Opens the file named <varname>path</> in the given
    <classname>View</>; to open a file in the current view, use the
    predefined variable <varname>view</> for the first parameter.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static Buffer <function>newFile</></>
  <paramdef>View <parameter>view</></>
 </funcprototype>
</funcsynopsis>
<para>
    This creates a new, Untitled buffer in the given
    <classname>View</>.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>closeBuffer</></>
  <paramdef>View  <parameter>view</></>
  <paramdef>Buffer  <parameter>buffer</></>
 </funcprototype>
</funcsynopsis>
<para>
    Closes the buffer named <varname>buffer</> in the view named
    <varname>view</>; the user will be prompted to save the buffer
    before closing if there are unsaved changes.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>saveAllBuffers</></>
  <paramdef>View <parameter>view</></>
  <paramdef>boolean <parameter>confirm</></>
 </funcprototype>
</funcsynopsis>
<para>
    This saves all open buffers with unsaved changes in the given
    <classname>View</>; the parameter <parameter>confirm</>
    determines whether jEdit initially asks for confirmation of the save
    operation.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>closeAllBuffers</></>
  <paramdef>View <parameter>view</></>
 </funcprototype>
</funcsynopsis>
<para>
    Closes all buffers in the given <classname>View</>; a dialog
    window will be displayed for any buffers with unsaved changes to
    obtain user instructions.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>exit</></>
  <paramdef>View <parameter>view</></>
  <paramdef>boolean <parameter>reallyExit</></>
 </funcprototype>
</funcsynopsis>
<para>
    This method causes jEdit to exit; if <parameter>reallyExit</> is
    false and jEdit is running in background mode, simply close all
    buffers and views and remain in background mode.
</para>
</listitem>


<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static final String <function>getProperty</></>
  <paramdef>String <parameter>name</></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the value of the property named by <varname>name</>, or
    <constant>null</> if the propoerty is undefined.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static final boolean <function>getBooleanProperty</></>
  <paramdef>String <parameter>name</></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns a <type>boolean</>value of <constant>true</> or
    <constant>false</> for the property named by <varname>name</> by
    examining the String contents of the property; returns
    <constant>false</> if the property cannot be found.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static final void <function>setProperty</></>
  <paramdef>String <parameter>name</></>
  <paramdef>String <parameter>property</></>
 </funcprototype>
</funcsynopsis>
<para>
    This method sets the property named by <varname>name</> with the value
    <varname>property</>; an existing proerty is overwritten.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static final void <function>setBooleanProperty</></>
  <paramdef>String <parameter>name</></>
  <paramdef>boolean <parameter>value</></>
 </funcprototype>
</funcsynopsis>
<para>
    This method sets the property named by <varname>name</> to
    <varname>value</>; the boolean value is stored internally as the
    string <quote>true</> or <quote>false</>.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static final void <function>setTemporaryProperty</></>
  <paramdef>String <parameter>name</></>
  <paramdef>String <parameter>property</></>
 </funcprototype>
</funcsynopsis>
<para>
    This sets a property that will not be stored during the current
    jEdit session only; this method is useful for storing a value
    obtained by one macro for use by another macro.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>getJEditHome</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the path of the directory containing the jEdit executable file.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>getSettingDirectory</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the path of the directory in which user-specific settings
    are stored.
</para>
</listitem>

</itemizedlist>


<para>The jEdit object also maintains a number of collections which
a macro may need to use. They include the following:</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static EditAction[] <function>getActions</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns an array of <quote>actions</> or short routines maintained and used
    by the editor.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static EditAction <function>getAction</></>
  <paramdef>String <parameter>action</></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the action named <varname>action</>, or
    <constant>null</> if it does not exist.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static Buffer[] <function>getBuffers</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns an array of open buffers.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static final Properties <function>getProperties</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns a Java <classname>Properties</> object (a class derived from
    <classname>Hashtable</>) holding all properties
    currently used by the program.  The constituent properties fall into three
    categories: application  properties, <quote>site</> properties, and
    <quote>user</> properties.  Site properties take precedences otber application
    properties with the same <quote>key</> or name, and user properties take
    precedence over both application and site properties.  User settings are
    written to a file named <filename>properties</> in the user settings
    directory upon program exit or whenever <function>jEdit.saveSettings()</>
    is called.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static int <function>getBufferCount</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the number of open buffers.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static Buffer <function>getBuffer</></>
  <paramdef>String <parameter>path</></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the <classname>Buffer</> object containing the file named
    <varname>path</>. or <constant>null</> if the buffer does not exist.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static Mode[] <function>getModes</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns an array containing all editing modes used by jEdit.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static Mode <function>getMode</></>
  <paramdef>String <parameter>name</></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the editing mode named by <varname>name</>, or
    <constant>null</> if such a mode does not exist.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static EditPlugin[] <function>getPlugins</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns an array containing all existing plugin applications.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>plugin static EditPlugin <function>getPlugin</></>
  <paramdef>String <parameter>name</></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the plugin named by <varname>name</>, or
    <constant>null</> if such a plugin does not exist.
</para>
</listitem>

</itemizedlist>
</sect1>

<sect1 id=class-View><title>Class View</>

<para>
    This class represents the <quote>parent</> or top-level frame window
    in which the editing occurs. It contains the various visible
    components of the program, including the editing pane, menubar,
    toolbar, and any docking windows containing plugins.
</para>

<para>
    Some useful methods from this class include the following:
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>splitHorizontally</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Splits the view horizontally.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>splitVertically</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Splits the view vertically.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>unsplit</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Unsplits the view.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public synchronized void <function>showWaitCursor</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Shows a <quote>waiting</> cursor (typically, an hourglass).
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public synchronized void <function>hideWaitCursor</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Removes the <quote>waiting</> cursor. This method and
    <function>showWaitCursor()</> are implemented using a reference
    count of requests for wait cursors, so the macro writer should
    be careful to use these methods in tandem.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public DockableWindowManager <function>getDockableWindowManager</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    The object returned by this method keeps track of all plugins
    that can be contained in dockable windows above, below and to the left and
    right of the editing pane. Calling this method followed by a call to
    <function>DockableWindowManager.getDockableWindow(String pluginName)</>
    is an efficient way to access and (if necessary) activate a plugin
    application.
</para>
</listitem>

</itemizedlist>

</sect1>

<!-- LaTeX spews with id's that are too long? -->
<sect1 id=class-DockableWindowManager><title>Class DockableWindowManager</title>

    <para>
        Windows conforming to jEdit's docking API can appear in window
        <quote>panes</quote> located above, below or to the left or right of the
        main editing pane. They can also be displayed in <quote>floating</quote>
        frame windows. A <classname>DockableWindowManager</classname> keeps
        track of the plugins associated with a particular
        <classname>View</classname>. Each <classname>View</classname> object
        contains an instance of this class.
    </para>

    <itemizedlist>
      <listitem>
        <funcsynopsis>
          <funcprototype>
            <funcdef>public DockableWindow <function>getDockableWindow</function>
            </funcdef><paramdef>String <parameter>name</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
        <para>
          This method returns the <classname>DockableWindow</classname>
          object named by the <varname>name</varname> parameter.  The name of a
          <classname>DockableWindow</classname> is a required property of the
          plugin.  If there is no <classname>DockableWindow</classname> bearing the
          requested name, the method return <constant>null</constant>.
        </para>
       </listitem>

       <listitem>
        <funcsynopsis>
          <funcprototype>
            <funcdef>public void <function>addDockableWindow</function>
            </funcdef><paramdef>String <parameter>name</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
        <para>
          If the <classname>DockableWindow</classname> named by the
          <varname>name</varname> parameter does not exist, a message is
          sent to the associated plugin application to create it.  The
          <classname>DockableWindow</classname> is then made visible.
        </para>
       </listitem>

       <listitem>
        <funcsynopsis>
          <funcprototype>
            <funcdef>public void <function>showDockableWindow</function>
            </funcdef><paramdef>String <parameter>name</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
       </listitem>

       <listitem>
        <funcsynopsis>
          <funcprototype>
            <funcdef>public void <function>removeDockableWindow</function>
            </funcdef><paramdef>String <parameter>name</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
       </listitem>

       <listitem>
        <funcsynopsis>
          <funcprototype>
            <funcdef>public void <function>toggleDockableWindow</function>
            </funcdef><paramdef>String <parameter>name</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
       <para>
         These methods, respectively show, hide and toggle the visibility
         of the <classname>DockableWindow</classname> object named by
         the <varname>name</varname> parameter.  If the
         <classname>DockableWindowManager</classname> does not contain a
         reference to the window, these methods send an error message to the
         activity log and have no other effect.  Only
         <function>addDockableWindow()</function> can cause the creation
         of a <classname>DockableWindow</classname>.
         </para>
       </listitem>
    </itemizedlist>

</sect1>

<sect1 id=class-JEditTextArea><title>Class JEditTextArea</>

<para>
    This class is the visible component that displays the file
    being edited. It is derived from Java's <classname>JComponent</> class.
</para>

<para>
    There are many methods in <classname>JEditTextArea</> that can
    be helpful in writing macros. Here is a summary grouped by
    function.
</para>

<para>
    Methods to get, set and move the position of the editing caret:
</para>

<itemizedlist>
<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final int <function>getCaretPosition</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns a zero-based index of the caret position in the existing buffer.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final void <function>setCaretPosition</></>
  <paramdef>int <parameter>caret</></>
 </funcprototype>
</funcsynopsis>
<para>
    Sets the caret position at <parameter>caret</>without selecting text.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final void <function>moveCaretPosition</></>
  <paramdef>int <parameter>caret</></>
 </funcprototype>
</funcsynopsis>
<para>
    This moves the caret without moving the mark (the other end of a
    selection of text). This has the effect of extending or reducing
    the selected text.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final int <function>getCaretLine</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the line on which the caret is positioned.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final int <function>getLineOfOffset</></>
  <paramdef>int <parameter>offset</></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the line on which the given offset is found.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public int <function>getLineStartOffset</></>
  <paramdef>int <parameter>line</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public int <function>getLineEndOffset</></>
  <paramdef>int <parameter>line</></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the offset of the beginning or end of the given line.
</para>
</listitem>

</itemizedlist>


<para>Methods to get and set selected text:</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final int <function>getSelectionStart</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final int <function>getSelectionEnd</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the buffer position of the beginning or end of the current selection.
</para>
</listitem>


<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final int <function>getSelectionStartLine</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final int <function>getSelectionEndLine</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
Returns the line containing the position of the selection's beginning or end.
</para>
</listitem>


<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>select</></>
  <paramdef>int <parameter>start</></>
  <paramdef>int <parameter>end</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final void <function>setSelectionStart</></>
  <paramdef>int <parameter>selectionStart</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final void <function>setSelectionEnd</></>
  <paramdef>int <parameter>selectionEnd</></>
 </funcprototype>
</funcsynopsis>
<para>
    Set the beginning or end of the selected text (or both) at the
    given buffer positions.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>selectBlock</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Selects the code block surrounding the caret.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>selectWord</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>selectLine</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>selectParagraph</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>selectAll</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>selectNone</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>


<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final String <function>getSelectedText</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>setSelectedText</></>
  <paramdef>String <parameter>selectedText</></>
 </funcprototype>
</funcsynopsis>
<para>
    Get and replaces the selected text.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>indentSelectedLines</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

</itemizedlist>


<para>
    Methods to get buffer text without regard to a selection:
</para>

<itemizedlist>
<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final String <function>getText</></>
  <paramdef>int <parameter>start</></>
  <paramdef>int <parameter>len</></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the text located between buffer offset positions.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final String <function>getLineText</></>
  <paramdef>int <parameter>lineIndex</>
  </>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the text on the given line.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public String <function>getText</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the entire text in the text area.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>setText</></>
  <paramdef>String <parameter>text</></>
 </funcprototype>
</funcsynopsis>
<para>
    Sets (and replaces) the entire text of the text area.
</para>
</listitem>

</itemizedlist>


<para>
    Methods for creating comments:
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>blockComment</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    This creates a block-style comment for each line in the selected text.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>boxComment</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    This creates a box-style comment encompassing the line in the selected text.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>wingCommnt</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    This creates a comment, using a single set of comment delimiters,
    beginning and ending with the selected text.
</para>
</listitem>

</itemizedlist>

<para>
    Shortcut methods that move the caret and select text (each
    taking a <type>boolean</> parameter to determine whether or
    not intervening text will be selected):
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToStartOfLine</></>
  <paramdef>boolean <parameter>select</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToEndOfLine</></>
  <paramdef>boolean <parameter>select</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToStartOfWhiteSpace</></>
  <paramdef>boolean <parameter>select</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToEndOfWhiteSpace</></>
  <paramdef>boolean <parameter>select</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToFirstVisibleLine</></>
  <paramdef>boolean <parameter>select</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToLastVisibleLine</></>
  <paramdef>boolean <parameter>select</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToNextCharacter</></>
  <paramdef>boolean <parameter>select</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToPrevCharacter</></>
  <paramdef>boolean <parameter>select</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToNextWord</></>
  <paramdef>boolean <parameter>select</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToPrevWord</></>
  <paramdef>boolean <parameter>select</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToNextLine</></>
  <paramdef>boolean <parameter>select</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToPrevLine</></>
  <paramdef>boolean <parameter>select</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToNextParagraph</></>
  <paramdef>boolean <parameter>select</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToPrevParagraph</></>
  <paramdef>boolean <parameter>select</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToNextBracket</></>
  <paramdef>boolean <parameter>select</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToPrevBracket</></>
  <paramdef>boolean <parameter>select</></>
 </funcprototype>
</funcsynopsis>
</listitem>

</itemizedlist>


<para>
    Methods to delete text:
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>delete</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Deletes the character to the left of the editing caret.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>deleteWord</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>deleteLine</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>deleteParagraph</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>deleteToStartOfLine</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>deleteToEndOfLine</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

</itemizedlist>


<para>
    Methods to get statistics on the buffer being edited:
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final int <function>getBufferLength</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the length of the buffer being edited.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final int <function>getLineCount</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the number of lines in the buffer being edited.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final int <function>getLineLength</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the length of the line number <varname>line</> (using a
    zero-based count).
</para>
</listitem>

</itemizedlist>

</sect1>

<sect1 id=class-Buffer><title>Class Buffer</>

<para>
    A <classname>Buffer</> represents the contents of an open text
    file as it is maintained in the computer's memory (as opposed to
    how it may stored on a disk). It is derived from Java's
    <classname>PlainDocument</> class.
</para>

<para>
    Here are some useful methods from the <classname>Buffer</> class:
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final String <function>getName</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final String <function>getPath</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final File <function>getFile</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

</itemizedlist>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final Mode <function>getMode</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>setMode</></>
  <paramdef>Mode <parameter>mode</></>
 </funcprototype>
</funcsynopsis>
<para>
    Gets and sets the editing mode for the buffer.
</para>
</listitem>

</itemizedlist>

<itemizedlist>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public int <function>getIndentSize</function></funcdef>
        <paramdef></>
      </funcprototype>
    </funcsynopsis>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public int <function>getTabSize</function></funcdef>
        <paramdef></>
      </funcprototype>
    </funcsynopsis>
    <para>
      These method returns the size of an inital indentation at the beginning
      of a line and the distance between tab stops, each measured in
      character columns. If these propoerties are not individually set for
      a specific buffer, they are inherited from the properties of the buffer's
      associated editing mode.
    </para>
  </listitem>

</itemizedlist>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>beginCompoundEdit</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>endCompoundEdit</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Marks the beginning and end of a series of operations that will
    be dealt with by a single <guimenuitem>Undo</> command.
</para>
</listitem>

</itemizedlist>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>addMarker</></>
  <paramdef>String <parameter>name</></>
  <paramdef>int <parameter>start</></>
  <paramdef>int <parameter>end</></>
 </funcprototype>
</funcsynopsis>
<para>
    Sets a marker named <varname>name</> for
    the section of text beginning at offset <varname>start</> and
    ending at offset <varname>end</>.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>removeMarker</></>
  <paramdef>String <parameter>name</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>removeAllMarkers</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

</itemizedlist>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final boolean <function>isNewFile</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns whether a buffer lacks a corresponding version on disk.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final boolean <function>isDirty</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns whether there have been unsaved changes to the buffer.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final boolean <function>isReadOnly</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public final boolean <function>isUntitled</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

</itemizedlist>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public boolean <function>save</></>
  <paramdef>View <parameter>view</></>
  <paramdef>String <parameter>path</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public boolean <function>save</></>
  <paramdef>final View <parameter>view</></>
  <paramdef>String <parameter>path</></>
  <paramdef>final boolean <parameter>rename</></>
 </funcprototype>
</funcsynopsis>
<para>
    The <parameter>rename</> parameter causes a buffer's name to
    change if set to <parameter>true</>; if <parameter>false</>, a copy
    is saved to <parameter>path</>.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public boolean <function>saveAs</></>
  <paramdef>View <parameter>view</></>
  <paramdef>boolean <parameter>rename</></>
 </funcprototype>
</funcsynopsis>
<para>
    Prompts the user for a new name for saving the file.
</para>
</listitem>

</itemizedlist>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>removeTrailingWhiteSpace</></>
  <paramdef>int <parameter>first</></>
  <paramdef>int <parameter>last</></>
 </funcprototype>
</funcsynopsis>
<para>
    Removes trailing whitespace from lines <parameter>first</> to
    <parameter>last</>.
</para>
</listitem>

</itemizedlist>

  <para>
    The following methods are inherited by <classname>Buffer</classname>
    from its parent class.  They are useful in extracting text from a
    <classname>Buffer</classname> object for searching purposes or other
    manipulation.
  </para>

  <itemizedlist>

    <listitem>
      <funcsynopsis>
        <funcprototype>
          <funcdef>public String <function>getText</function></funcdef><!--
          --><paramdef>int <parameter>offset</parameter></paramdef>
          <paramdef>int <parameter>length</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </listitem>

    <listitem>
      <funcsynopsis>
        <funcprototype>
          <funcdef>public void <function>getText</function></funcdef><!--
          --><paramdef>int <parameter>offset</parameter></paramdef>
          <paramdef>int <parameter>length</parameter></paramdef>
          <paramdef>Segment <parameter>text</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
     <para>
       These methods extract a portion of buffer text having length
       <varname>length</varname> beginning at offset position
       <varname>offset</varname>.  The first method returns a newly
       created <classname>String</classname> containing the requested
       excerpt.  The second version initializes an existing
       <classname>Segment</classname> object with the location of the
       requested excerpt.  The <classname>Segment</classname> object
       represents array locations within the <classname>Buffer</classname>
       object's data and should be used on a read-only basis; calling
       <function>toString()</function> on the <classname>Segment</classname>
       will create a new object suitable for manipulation.
     </para>
    </listitem>

    </itemizedlist>



</sect1>

<sect1 id=class-Macros><title>Class Macros</>

<para>
    The following shortcut methods are useful in displaying output messages
    or obtaining input.
</para>

  <itemizedlist>

<listitem>
 <funcsynopsis>
  <funcprototype>
   <funcdef>public static void <function>message</></>
	<paramdef>View <parameter>view</></>
    <paramdef>String <parameter>message</></>
  </funcprototype>
 </funcsynopsis>
<para>
    Displays the text of <parameter>message</> (with an information icon)
    in a modal message box centered on the designated <parameter>view</>.
</para>
</listitem>

<listitem>
 <funcsynopsis>
  <funcprototype>
   <funcdef>public static void <function>error</></>
	<paramdef>View <parameter>view</></>
    <paramdef>String <parameter>message</></>
  </funcprototype>
 </funcsynopsis>
<para>
    Similar to <function>message</> but displays an error icon.
</para>
</listitem>

<listitem>
 <funcsynopsis>
  <funcprototype>
   <funcdef>public static String <function>input</function></funcdef>
   <paramdef>View <parameter>view</parameter></paramdef>
   <paramdef>String <parameter>prompt</parameter></paramdef>
  </funcprototype>
 </funcsynopsis>
<para>
    Displays the text of <parameter>prompt</>, a text input field, and a
    question icon in the designated <parameter>view</>.  Returns the
    contents of the text field if the dialog box is dismissed by pressing the
    <guilabel>OK</> button, or <constant>null</> if the <guilabel>Cancel</>
    button is pressed.
</para>
</listitem>

<listitem>
 <funcsynopsis>
  <funcprototype>
   <funcdef>public static String <function>input</function></funcdef>
   <paramdef>View <parameter>view</parameter></paramdef>
   <paramdef>String <parameter>prompt</parameter></paramdef>
   <paramdef>String <parameter>defaultValue</parameter></paramdef>
  </funcprototype>
 </funcsynopsis>
<para>
    Displays the text of <parameter>prompt</>, a text input field, and a
    question icon in the designated <parameter>view</>. The text field
    will initially contain the text of <parameter>defaultValue</>. Returns the
    contents of the text field if the dialog box is dismissed by pressing the
    <guilabel>OK</> button, or <constant>null</> if the <guilabel>Cancel</>
    button is pressed.
</para>
</listitem>

</itemizedlist>


</sect1>

<sect1 id=class-SearchAndReplace><title>Class SearchAndReplace</>

<para>
    Search and replace routines are undertaken by jEdit's
    <classname>SearchAndReplace</> class.
</para>

<para>
    The following static methods allow you to set or get the parameters
    for a search.  You can do this prior to or even without
    activating the search dialog.
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>setSearchString</></>
  <paramdef>String <parameter>search</></>
 </funcprototype>
</funcsynopsis>
</listitem>


<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>getSearchString</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>setReplaceString</></>
  <paramdef>String <parameter>replace</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>getReplaceString</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>setIgnoreCase</></>
  <paramdef>boolean <parameter>ignoreCase</></>
 </funcprototype>
</funcsynopsis>
</listitem>


<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>getIgnoreCase</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>


<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>setRegexp</></>
  <paramdef>boolean <parameter>regexp</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>getRegexp</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Determines whether the search term is interpreted as a regular expression.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>setReverseSearch</></>
  <paramdef>boolean <parameter>reverse</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>getReverseSearch</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
<para>
    Determines whether a reverse search will conducted from the current
    position to the beginning of a buffer.  Currently, only literal
    reverse searches are supported.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>setSearchFileSet</></>
  <paramdef>SearchFileSet <parameter>fileset</></>
 </funcprototype>
</funcsynopsis>
<para>
    A <classname>SearchFileSet</> is an abstract class representing the
    set of files that are the subject of a search. There are three classes derived
    from <classname>SearchFileSet</>:
</para>

<para>
    <emphasis>class DirectoryListSet</>
</para>

<para>
    This represents a set of files taken from a directory.  It can be extended recursively
    to include files in subdirectories.  The constructor for this class has the
    following syntax:
</para>

<itemizedlist mark=disc>
<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public <function>DirectoryListSet</></>
  <paramdef>String <parameter>directory</></>
  <paramdef>String <parameter>glob</></>
  <paramdef>boolean <parameter>recurse</></>
 </funcprototype>
</funcsynopsis>
<para>
    The parameter <parameter>glob</> is the glob pattern
    that determines which files from the
    directory will be selected (see <xref linkend=globs> for
    information about glob patterns),
    and <parameter>recurse</> determines whether the
    selection will recurse into subdirectories.
</para>
</listitem>
</itemizedlist>

<para>
<emphasis>class AllBufferSet</emphasis>
</para>

<para>
    This class represents the set of all buffers currently open.  The constructor
    for this class takes a file mask as a single parameter:
</para>

<itemizedlist mark=disc>
<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public <function>AllBufferSet</></>
  <paramdef>String <parameter>glob</></>
 </funcprototype>
</funcsynopsis>
</listitem>
</itemizedlist>

<para>
<emphasis>class CurrentBufferSet</>
</para>

<para>
    This class represents a buffer set consisting of the current buffer only.
    The constructor has no parameters.
</para>

<itemizedlist mark=disc>
<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public <function>CurrentBufferSet</></>
  <paramdef></>
 </funcprototype>
</funcsynopsis>
</listitem>
</itemizedlist>

</listitem>

</itemizedlist>

<para>
    The actual tasks of searching and replacing, based on these parameters,
    are performed by the following methods. The return value of each indicates
    whether the operation succeeded.
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>find</></>
  <paramdef>View <parameter>view</></>
 </funcprototype>
</funcsynopsis>
<para>
    This will select the next instance of matching text if the search
    is successful.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>replace</></>
  <paramdef>View <parameter>view</></>
 </funcprototype>
</funcsynopsis>
<para>
    This will replace the each occurrence of the <quote>search string</>
    in selected text with the <quote>replace string</>.  If no text is selected,
    the method has no effect.
</para>
</listitem>


<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>replaceAll</></>
  <paramdef>View <parameter>view</></>
 </funcprototype>
</funcsynopsis>
<para>
    This method performs a replacement in all buffers in the
    <classname>SearchFileSet</>. Text selection is ignored.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>hyperSearch</></>
  <paramdef>View <parameter>view</></>
 </funcprototype>
</funcsynopsis>
<para>
    This collects all instances of matching text in the members of the
    <classname>SearchFileSet</> and displays them in a dedicated window.
    Text selection is ignored.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>showSearchDialog</></>
  <paramdef>View <parameter>view</></>
  <paramdef>String <parameter>defaultFind</></>
 </funcprototype>
</funcsynopsis>
<para>
    When activated, the dialog will reflect any options programatically set by
    <function>setIgnoreCase()</>, <function>setRegexp()</> and
    <function>setSearchFileSet()</>, but not the search
    or replace strings. The parameter <parameter>defaultFind</> (which may be
    <constant>null</>) contains the search text that will be displayed in the
    corresponding field of the dialog.
</para>
</listitem>

</itemizedlist>

<para>
    The <quote>HyperSearch</> and <quote>Keep dialog</> features, as reflected in
    checkbox options in the search dialog, are not handled from within
    <classname>SearchAndReplace</>. If you wish to have these options set
    before the search dialog appears, make a prior call to either or both of the
    following:
</para>

<programlisting>    jEdit.setBooleanProperty(<quote>search.hypersearch.toggle</>,true);
    jEdit.setBooleanProperty(<quote>search.keepDialog.toggle</>,true);</programlisting>

<para>
    If you are not using the dialog to undertake a search or replace, you may call
    any of the search and replace methods (including <function>hyperSearch()</>)
    without concern for the value of these properties.
</para>

</sect1>


<sect1 id=class-GUIUtilities><title>Class GUIUtilities</>

<para>
    One <type>static</> method in this class encapsulates the creation and
    display of file selection dialogs.
</para>

<itemizedlist>

<!-- <listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>showFileDialog</></>
  <paramdef>View <parameter>view</></>
  <paramdef>String <parameter>file</></>
  <paramdef>int <parameter>type</></>
 </funcprototype>
</funcsynopsis>
<para>
This method displays a Java Swing <classname>JFileChooser</> dialog with
<varname>view</> as its parent component.  The <parameter>file</> parameter will
be the path and file first displayed by the dialog.  If <parameter>file</> is set
as <constant>null</>, the application's working directory will be displayed.
The <parameter>type</> parameter can either be <constant>JFileChooser.OPEN_DIALOG</>
(or 0) or <constant>JFileChooser.SAVE_DIALOG</> (or 1).
</para>
</listitem> -->

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String[] <function>showVFSFileDialog</></>
  <paramdef>View <parameter>view</></>
  <paramdef>String <parameter>path</></>
  <paramdef>int <parameter>type</></>
  <paramdef>boolean <parameter>multipleSelection</></>
 </funcprototype>
</funcsynopsis>
<para>
    This method displays the <!-- enhanced, more versatile -->
    <classname>VFSFileChooserDialog</> provided by jEdit.  <!-- In this case, -->
    If <parameter>path</> is set to <constant>null</>, the dialog
    will display the directory of the current buffer. The
    <parameter>type</> parameter can either be
    <constant>JFileChooser.OPEN_DIALOG</>
    or <constant>JFileChooser.SAVE_DIALOG</> (you might need to
    import the <classname>JFileChooser</> class from the
    <literal>javax.swing</> package). The final parameter
    determines whether multiple selection of files is permitted.
</para>
</listitem>

</itemizedlist>

</sect1>

<sect1 id=class-TextUtilities><title>Class TextUtilities</>

<para>
    This class contains a number of <type>static</> methods
    that can be helpful in handling buffer text.
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static int <function>findMatchingBracket</></>
  <paramdef>Buffer <parameter>buffer</></>
  <paramdef>int <parameter>line</></>
  <paramdef>int <parameter>offset</></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the offset of the bracket matching the one at offset
    <parameter>offset</> of line <parameter>line</> of the buffer;
    returns -1 if the bracket is unmatched or if the specified
    character is not a bracket.  The method throws a
    <classname>BadLocationException</> if the <parameter>line</>
    or <parameter>offset</> parameters are out of range.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static int <function>findWordStart</></>
  <paramdef>String <parameter>line</></>
  <paramdef>int <parameter>pos</></>
  <paramdef>String <parameter>noWordSep</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static int <function>findWordEnd</></>
  <paramdef>String <parameter>line</></>
  <paramdef>int <parameter>pos</></>
  <paramdef>String <parameter>noWordSep</></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the position on which the word found on line
    <parameter>line</>, position <parameter>line</> begins or ends.
    The parameter <parameter>noWordSep</> contains those non-alphanumeric
    characters that will be treated as part of a word for purposes of
    finding the beginning or end of word (such as an underscore
    character).
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>format</></>
  <paramdef>String <parameter>text</></>
  <paramdef>int <parameter>maxLineLength</></>
 </funcprototype>
</funcsynopsis>
<para>
    Reformats a string and inserts line separators as necessary so
    that no line exceeds <parameter>maxLineLength</> in length.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>spacesToTabs</></>
  <paramdef>String <parameter>in</></>
  <paramdef>int <parameter>tabSize</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>tabsToSpaces</></>
  <paramdef>String <parameter>in</></>
  <paramdef>int <parameter>tabSize</></>
 </funcprototype>
</funcsynopsis>
<para>
    Makes the indicated change based upon a tab size of
    <parameter>tabSize</>.
</para>
</listitem>

</itemizedlist>

</sect1>

<sect1 id=class-MiscUtilities><title>Class MiscUtilities</>

<para>
This class is another collection of <type>static</> utility methods.
</para>

<para>
    These methods extract various elements from a path name:
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>getFileName</></>
  <paramdef>String <parameter>path</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>getFileExtension</></>
  <paramdef>String <parameter>name</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>getParentOfFile</></>
  <paramdef>String <parameter>path</></>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the directory containing the specified file.
    <!-- XXX: for local files only -->
</para>
</listitem>

</itemizedlist>

<para>
    The following method creates a string of whitespace characters that uses as
    many tabs as possible:
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>createWhiteSpace</></>
  <paramdef>int <parameter>len</></>
  <paramdef>int <parameter>tabSize</></>
 </funcprototype>
</funcsynopsis>
<para>
    If <parameter>tabSize</> is set to zero, the string will consist entirely
    of space characters.  To get a whitespace string tuned to the current buffer's
    editing mode, call this method as follows:</para>
<informalexample>
<programlisting>    myWhitespace = MiscUtilities.createWhiteSpace(myLength,
        buffer.getMode().getProperty(tabSize).intValue());</programlisting></informalexample>
<para>
    Here, <function>getProperty()</> returns an encapsulating
    <classname>Integer</> object.  It yields its <quote>primitive</>
    <type>int</> value with a call to <function>intValue()</>.
</para>

</listitem>
</itemizedlist>

<para>
    Here are two sorting methods, one for simple arrays and one for
    Java <classname>Vector</> objects:
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>quicksort</></>
  <paramdef>Object[] <parameter>obj</></>
  <paramdef>Compare <parameter>compare</></>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>quicksort</></>
  <paramdef>Vector <parameter>vector</></>
  <paramdef>Compare <parameter>compare</></>
 </funcprototype>
</funcsynopsis>
</listitem>

</itemizedlist>

<para>
    The type of the second parameter in both methods is a Java
    <glossterm>interface</glossterm> defined inside the
    <classname>MiscUtilities</> class. Any Java class implementing
    an interface must implement each of the methods set forth
    in the interface's abstract specification.  The <classname>Compare</>
    interface consists of a single method:
</para>

<itemizedlist>
<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public int <function>compare</></>
  <paramdef>Object <parameter>obj1</></>
  <paramdef>Object <parameter>obj2</></>
 </funcprototype>
</funcsynopsis>
</listitem>
</itemizedlist>

<para>
    To work correctly with the <function>quicksort</> algorithm, this method
    should return a negative value if <parameter>obj1</> is ordered prior to
    <parameter>obj2</>, a positive value if <parameter>obj2</>
    is prior, and zero if the two objects are equivalent for ordering purposes.
</para>

<para>
    Except under JDK 1.3, BeanShell cannot implement arbitrary interfaces
    such as <classname>Compare</> (although, as we have noted <link
    linkend=explain-add-listeners>earlier</link>, a BeanShell method can
    implement a number of specific listener interfaces).  Fortunately for macro
    writers, jEdit provides a number of classes implementing <classname>Compare</>
    for sorting purposes. Among them are <classname>StringCompare</> and
    <classname>StringICaseCompare</>. Both classes compare <classname>String</>
    object; the latter class compares two strings on a case-insentive basis.
</para>

<para>
    Calling <function>quicksort</> on a <classname>Vector</> of
    <classname>String</> objects could therefore take the following form:
</para>
<informalexample><programlisting>MiscUtilities.quicksort(myVectorOfStrings,
    new StringICaseCompare());</programlisting></informalexample>
<para>
    There is no return value, but the <classname>Vector</> provided
    as the first parameter will be now be sorted on a case-insensitive basis.
</para>

</sect1>


<sect1 id=class-BeanShell><title>Class BeanShell</>

<para>
    This class integrates the BeanShell interpreter into jEdit.  One method is
    worth mentioning here because it can be used in a macro to chain together
    execution of several macros:
</para>

<itemizedlist>
<listitem>
<funcsynopsis>
<funcprototype>
  <funcdef>public static void <function>runScript</></funcdef>
  <paramdef>View <parameter>view</></>
  <paramdef>String <parameter>path</></>
  <paramdef>boolean <parameter>ownNamespace</></>
  <paramdef>boolean <parameter>rethrowBshErrors</></>
 </funcprototype>
</funcsynopsis>
</listitem>
</itemizedlist>

<para>
    This method runs the script file identified by <parameter>path</>.  Within
    that script, references to <parameter>buffer</>, <parameter>textArea</>
    and <parameter>editPane</> are
    determined with reference to the <parameter>view</> parameter.  If
    <parameter>rethrowBshErrors</> is set to true, any runtime exception thrown
    by the child script will be rethrown to the parent script and become
    visible to the user.
</para>

<para>
    The parameter <parameter>ownNamespace</>
    determines whether a separate namespace will be established for the
    BeanShell interpreter. If set to <constant>false</>, methods and
    variables defined in the script will be available to all future
    uses of BeanShell; if set to <constant>true</>, they will be lost as
    soon as the script finishes executing. jEdit uses a value of
    <constant>false</> when running the startup macro, and a value of
    <constant>true</> when running all other macros.
</para>

</sect1>

</appendix>


